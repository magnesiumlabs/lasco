// ============================================================================================= //
//                                           FUNCTIONS                                           //
// ============================================================================================= //

@use "sass:list";
@use "sass:map";
@use "sass:string";
@use "@unsass/types" as type;
@use "./variables";

@function is-quoted-string($value) {
    @if type.is-string($value) {
        @return string.unquote($value);
    }

    @return $value;
}

@function extend($default, $property) {
    $map: $default;

    @if (type.is-map(map.get(variables.$extend, $property))) {
        $map: map.merge($default, map.get(variables.$extend, $property));
    }

    @return $map;
}

@function filter($default, $property) {
    $list: $default;

    @if type.is-list(map.get(variables.$extend, $property)) or type.is-string(map.get(variables.$extend, $property)) or type.is-number(map.get(variables.$extend, $property)) {
        @each $value in map.get(variables.$extend, $property) {
            @if list.index($default, $value) == null {
                @error "Invalid '#{$value}' option, '#{$value}' is not alowed here. Choose one of '#{$default}' options.";
            }

            $list: map.get(variables.$extend, $property);
        }
    }

    @return $list;
}

@function is-black-list() {
    @return map.has-key(variables.$engine, "list") and map.get(variables.$engine, "list") == "black";
}

@function is-white-list() {
    @return map.has-key(variables.$engine, "list") and map.get(variables.$engine, "list") == "white";
}

@function has-declaration($property) {
    $declaration: true; // Black - Default enable all.

    @if is-white-list() {
        $declaration: false;  // White - Disabled all.

        @if map.has-key(variables.$extend, $property) {
            $declaration: true; // White - Enabled only `true`.
        }
    } @else {
        @if map.has-key(variables.$extend, $property) and map.get(variables.$extend, $property) == false {
            $declaration: false; // Black - Disabled only `false`.
        }
    }

    @return $declaration;
}

@function has-breakpoints() {
    $breakpoint: false;

    @if (map.has-key(variables.$engine, "screens") and type.is-map(map.get(variables.$engine, "screens"))) or (map.has-key(variables.$engine, "screens") and type.is-list(map.get(variables.$engine, "screens"))) {
        $breakpoint: true;
    }

    @return $breakpoint;
}
