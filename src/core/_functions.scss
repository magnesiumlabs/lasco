// ============================================================================================= //
//                                           FUNCTIONS                                           //
// ============================================================================================= //

@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "./variables";

@function is-quoted-string($value) {
    @if meta.type-of($value) == string {
        @return string.unquote($value);
    }

    @return $value;
}

@function extend($default, $property) {
    $map: $default;

    @if (meta.type-of(map.get(variables.$extend, $property)) == "map") {
        $map: map.merge($default, map.get(variables.$extend, $property));
    }

    @return $map;
}

@function filter($default, $property) {
    $list: $default;

    @if meta.type-of(map.get(variables.$extend, $property)) == "list" or meta.type-of(map.get(variables.$extend, $property)) == "string" or meta.type-of(map.get(variables.$extend, $property)) == "number" {
        @each $value in map.get(variables.$extend, $property) {
            @if list.index($default, $value) == null {
                @error "Invalid '#{$value}' option, '#{$value}' is not alowed here. Choose one of '#{$default}' options.";
            }

            $list: map.get(variables.$extend, $property);
        }
    }

    @return $list;
}
