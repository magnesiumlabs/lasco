// ============================================================================================= //
//                                            MIXINS                                             //
// ============================================================================================= //

@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "@sass-collective/css";
@use "@unsass/breakpoint";
@use "@unsass/utilities";
@use "./variables";
@use "./functions";

// ------------------------------------------------------------------------- //
// Private mixins
// ------------------------------------------------------------------------- //

// ...

// ------------------------------------------------------------------------- //
// Public mixins
// ------------------------------------------------------------------------- //

@mixin declaration($property) {
    $declaration: true;
    $breakpoint: false;

    ///
    /// Sets white list engine.
    ///

    @if functions.is-white-list() {
        $declaration: false;
    }

    @if functions.is-white-list() {
        @if map.has-key(variables.$extend, $property) {
            $declaration: true;
        }
    } @else {
        @if map.has-key(variables.$extend, $property) and map.get(variables.$extend, $property) == false {
            $declaration: false;
        }
    }

    ///
    /// Conditional breakpoint.
    ///

    @if functions.has-breakpoints() {
        $breakpoint: true;
    }

    ///
    /// Set declaration.
    ///

    @if $declaration {
        @content;

        @if $breakpoint {
            @each $key, $value in breakpoint.get-screens() {
                @include breakpoint.up($key) {
                    @include css.selector($key) {
                        @content;
                    }
                }
            }
        }
    }
}

@mixin createUtility($property, $utilities, $variation: ()) {
    $extend: ();

    @if meta.type-of(map.get(variables.$extend, $property)) == "list" or meta.type-of(map.get(variables.$extend, $property)) == "string" or meta.type-of(map.get(variables.$extend, $property)) == "number" {
        @each $key in map.get(variables.$extend, $property) {
            $extend: map.set($extend, $key, map.get($utilities, $key));
        }
    } @else {
        $extend: functions.extend($utilities, $property);
    }

    @if $variation and meta.type-of($variation) == "map" {
        @each $key, $value in $variation {
            $filter-function: "";

            ///
            /// CSS Filter Functions.
            ///

            @if meta.type-of($value) == "string" {
                @if string.index($value, "filter:blur") {
                    $filter-function: "blur"
                } @else if string.index($value, "filter:contrast") {
                    $filter-function: "contrast"
                } @else if string.index($value, "filter:brightness") {
                    $filter-function: "brightness"
                }
            }

            ///
            /// Declaration.
            ///

            .#{$key} {
                @include declaration($property) {
                    @each $key2, $value2 in $extend {
                        @if meta.type-of($key2) == "string" {
                            $key2: utilities.string-replace($key2, "/", \/);
                        }

                        &-#{$key2} {
                            @if meta.type-of($value) == "string" and string.index($value, "filter") {
                                filter: #{$filter-function}(string.unquote($value2));
                            } @else {
                                @if meta.type-of($value) == "list" {
                                    @each $key3 in $value {
                                        #{$key3}: string.unquote($value2);
                                    }
                                } @else {
                                    #{$value}: string.unquote($value2);
                                }
                            }
                        }
                    }
                }
            }
        }
    } @else {
        @each $key, $value in $extend {
            .#{$key} {
                @include declaration($property) {
                    #{$property}: string.unquote($value);
                }
            }
        }
    }
}
