// ============================================================================================= //
//                                            MIXINS                                             //
// ============================================================================================= //

@use "sass:list";
@use "sass:map";
@use "@unsass/breakpoint";
@use "@unsass/css";
@use "@unsass/selector";
@use "@unsass/string";
@use "@unsass/types" as type;
@use "./variables";
@use "./functions";

// ------------------------------------------------------------------------- //
// Private mixins
// ------------------------------------------------------------------------- //

///
/// Selector.
///
@mixin _selector($name, $prefix: null) {
    $separator: null;

    @if $prefix {
        $separator: "-";
    }

    @include selector.create($name, $prefix, $separator) {
        @content;
    }
}

///
/// Declaration.
///
@mixin _declaration($property, $value, $filter: false) {
    @if $filter {
        $value: #{$property}(string.unquote($value));
        $property: "filter";
    }

    @if type.is-string($value) {
        $value: string.unquote($value);
    }

    @include css.declaration($property, $value, variables.$important);
}

///
/// Breakpoint.
///
@mixin _breakpoint {
    @if functions.has-breakpoints() {
        @each $key, $value in breakpoint.get-screens() {
            @include breakpoint.up($key) {
                @include selector.create("#{list.nth(&, 1)}", $key, variables.$separator, $root: true) {
                    @content;
                }
            }
        }
    }
}

@mixin _responsive($property) {
    @if functions.has-declaration($property) {
        @content;

        @include _breakpoint {
            @content;
        }
    }
}

// ------------------------------------------------------------------------- //
// Public mixins
// ------------------------------------------------------------------------- //

@mixin createUtility($property, $utilities, $variation: ()) {
    $extend: ();
    $filter: false;

    @if type.is-list(map.get(variables.$extend, $property)) or type.is-string(map.get(variables.$extend, $property)) or type.is-number(map.get(variables.$extend, $property)) {
        @each $key in map.get(variables.$extend, $property) {
            $extend: map.set($extend, $key, map.get($utilities, $key));
        }
    } @else {
        $extend: functions.extend($utilities, $property);
    }

    $test: ();

    @each $key, $value in $extend {
        @each $variation in $variation {
            $test: map.set($test, "#{list.nth($variation, 1)}-#{$key}", $value);
        }
    }

    @include _selector("test", variables.$prefix) {
        @include _responsive($property) {
            @debug $extend;

            @each $extend in $test {
                @include _declaration($property, list.nth($extend, 2));
            }
        }
    }

    // @each $variation in $variation {
    //    @debug $variation;
    //
    //    @include _selector(list.nth($variation, 1), variables.$prefix) {
    //        @include _responsive($property) {
    //            @each $key, $value in $extend {
    //                @include _declaration($property, $value, $filter);
    //            }
    //        }
    //    }
    //}

    //@each $key, $value in $variation {
    //    $properties: $value;
    //    $filter: false;
    //
    //    @if type.is-string($value) and list.index(variables.$filters, $value) != null {
    //        $filter: true
    //    }
    //
    //    @include _selector($key, variables.$prefix) {
    //        @include _responsive($property) {
    //            @each $key, $value in $extend {
    //                @if type.is-string($key) {
    //                    $key: string.replace($key, "/", \/);
    //                }
    //
    //                @if $key == "DEFAULT" {
    //                    @include _declaration($properties, $value, $filter);
    //                } @else {
    //                    &-#{$key} {
    //                        @each $key in $properties {
    //                            @include _declaration($key, $value, $filter);
    //                        }
    //                    }
    //                }
    //            }
    //        }
    //    }
    //}

    //@each $key, $value in $extend {
    //    @if $variation and type.is-map($variation) {
    //        @each $variation in $variation {
    //            $property: list.nth($variation, 2);
    //
    //            @if type.is-string(list.nth($variation, 2)) and list.index(variables.$filters, list.nth($variation, 2)) != null {
    //                $filter: true
    //            }
    //
    //            @if type.is-string($key) {
    //                $key: string.replace($key, "/", \/);
    //            }
    //
    //            @if $key == "DEFAULT" {
    //                $key: "#{list.nth($variation, 1)}";
    //            } @else {
    //                $key: "#{list.nth($variation, 1)}-#{$key}";
    //            }
    //        }
    //    }
    //
    //    @include _selector($key, variables.$prefix) {
    //        @include _responsive($property) {
    //            @include _declaration($property, $value, $filter);
    //        }
    //    }
    //}
}
