// ============================================================================================= //
//                                            MIXINS                                             //
// ============================================================================================= //

@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "@unsass/breakpoint";
@use "@unsass/css";
@use "@unsass/selector";
@use "@unsass/utilities";
@use "./variables";
@use "./functions";

// ------------------------------------------------------------------------- //
// Private mixins
// ------------------------------------------------------------------------- //

// ...

// ------------------------------------------------------------------------- //
// Public mixins
// ------------------------------------------------------------------------- //

@mixin responsive($property) {
    $declaration: true;
    $breakpoint: false;

    ///
    /// Sets white list engine.
    ///

    @if functions.is-white-list() {
        $declaration: false;
    }

    @if functions.is-white-list() {
        @if map.has-key(variables.$extend, $property) {
            $declaration: true;
        }
    } @else {
        @if map.has-key(variables.$extend, $property) and map.get(variables.$extend, $property) == false {
            $declaration: false;
        }
    }

    ///
    /// Conditional breakpoint.
    ///

    @if functions.has-breakpoints() {
        $breakpoint: true;
    }

    ///
    /// Set declaration.
    ///

    @if $declaration {
        @content;

        @if $breakpoint {
            @each $key, $value in breakpoint.get-screens() {
                @include breakpoint.up($key) {
                    @include css.selector($key, variables.$separator) {
                        @content;
                    }
                }
            }
        }
    }
}

@mixin createUtility($property, $utilities, $variation: ()) {
    $extend: ();

    @if meta.type-of(map.get(variables.$extend, $property)) == "list" or meta.type-of(map.get(variables.$extend, $property)) == "string" or meta.type-of(map.get(variables.$extend, $property)) == "number" {
        @each $key in map.get(variables.$extend, $property) {
            $extend: map.set($extend, $key, map.get($utilities, $key));
        }
    } @else {
        $extend: functions.extend($utilities, $property);
    }

    @if $variation and meta.type-of($variation) == "map" {
        @each $key, $value in $variation {
            $is-filter: false;

            ///
            /// Filter property.
            ///

            @if meta.type-of($value) == "string" and list.index(variables.$filters, $value) != null {
                $is-filter: true
            }

            ///
            /// Declaration.
            ///

            @include selector($key, variables.$prefix) {
                @include responsive($property) {
                    @each $key2, $value2 in $extend {
                        @if meta.type-of($key2) == "string" {
                            $key2: utilities.string-replace($key2, "/", \/);
                        }

                        @if $key2 == "DEFAULT" {
                            @if meta.type-of($value) == "string" and $is-filter {
                                @include declaration($value, $value2, true);
                            } @else {
                                @include declaration($value, $value2);
                            }
                        } @else {
                            &-#{$key2} {
                                @if meta.type-of($value) == "string" and $is-filter {
                                    @include declaration($value, $value2, true);
                                } @else {
                                    @if meta.type-of($value) == "list" {
                                        @each $key3 in $value {
                                            @include declaration($key3, $value2);
                                        }
                                    } @else {
                                        @include declaration($value, $value2);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    } @else {
        @each $key, $value in $extend {
            @include selector($key, variables.$prefix) {
                @include responsive($property) {
                    @include declaration($property, $value);
                }
            }
        }
    }
}

///
/// Selector.
///
@mixin selector($name, $prefix: null) {
    $separator: null;

    @if $prefix {
        $separator: "-";
    }

    @include selector.create($name, $prefix, $separator) {
        @content;
    }
}

///
/// Declaration.
///
@mixin declaration($property, $value, $filter: false) {
    @if $filter {
        $value: #{$property}(string.unquote($value));
        $property: "filter";
    }

    @include css.declaration($property, string.unquote($value), variables.$important);
}
