// ============================================================================================= //
//                                            MIXINS                                             //
// ============================================================================================= //

@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "@unsass/breakpoint";
@use "@unsass/css";
@use "@unsass/selector";
@use "@unsass/string" as unsass-string;
@use "./variables";
@use "./functions";

// ------------------------------------------------------------------------- //
// Private mixins
// ------------------------------------------------------------------------- //

///
/// Selector.
///
@mixin _selector($name, $prefix: null) {
    $separator: null;

    @if $prefix {
        $separator: "-";
    }

    @include selector.create($name, $prefix, $separator) {
        @content;
    }
}

///
/// Declaration.
///
@mixin _declaration($property, $value, $filter: false) {
    @if $filter {
        $value: #{$property}(string.unquote($value));
        $property: "filter";
    }

    @if meta.type-of($value) == "string" {
        $value: string.unquote($value);
    }

    @include css.declaration($property, $value, variables.$important);
}

///
/// Breakpoint.
///
@mixin _breakpoint {
    @if functions.has-breakpoints() {
        @each $key, $value in breakpoint.get-screens() {
            @include breakpoint.up($key) {
                @include selector.create("#{list.nth(&, 1)}", $key, variables.$separator, $root: true) {
                    @content;
                }
            }
        }
    }
}

@mixin _responsive($property) {
    @if functions.has-declaration($property) {
        @content;

        @include _breakpoint {
            @content;
        }
    }
}

// ------------------------------------------------------------------------- //
// Public mixins
// ------------------------------------------------------------------------- //

@mixin createUtility($property, $utilities, $variation: ()) {
    $extend: ();

    @if meta.type-of(map.get(variables.$extend, $property)) == "list" or meta.type-of(map.get(variables.$extend, $property)) == "string" or meta.type-of(map.get(variables.$extend, $property)) == "number" {
        @each $key in map.get(variables.$extend, $property) {
            $extend: map.set($extend, $key, map.get($utilities, $key));
        }
    } @else {
        $extend: functions.extend($utilities, $property);
    }

    @if $variation and meta.type-of($variation) == "map" {
        @each $key, $value in $variation {
            $properties: $value;
            $filter: false;

            ///
            /// Filter property.
            ///

            @if meta.type-of($value) == "string" and list.index(variables.$filters, $value) != null {
                $filter: true
            }

            ///
            /// Declaration.
            ///

            @include _selector($key, variables.$prefix) {
                @include _responsive($property) {
                    @each $key, $value in $extend {
                        @if meta.type-of($key) == "string" {
                            $key: unsass-string.replace($key, "/", \/);
                        }

                        @if $key == "DEFAULT" {
                            @include _declaration($properties, $value, $filter);
                        } @else {
                            &-#{$key} {
                                @each $key in $properties {
                                    @include _declaration($key, $value, $filter);
                                }
                            }
                        }
                    }
                }
            }
        }
    } @else {
        @each $key, $value in $extend {
            @include _selector($key, variables.$prefix) {
                @include _responsive($property) {
                    @include _declaration($property, $value);
                }
            }
        }
    }
}
